// <auto-generated />
using System;
using Cinema.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cinema.DAL.Migrations
{
    [DbContext(typeof(CinemaContext))]
    [Migration("20210507095715_AddUserStuff")]
    partial class AddUserStuff
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cinema.DAL.Entities.FilmEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.HallEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TheaterEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TheaterEntityId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Sessions.AdditionalProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SessionEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SessionEntityId");

                    b.ToTable("AdditionalServices");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Sessions.SessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FilmEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HallEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TheaterEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FilmEntityId");

                    b.HasIndex("HallEntityId");

                    b.HasIndex("TheaterEntityId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.SittingPlaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HallEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("SittingPlaceType")
                        .HasColumnType("int");

                    b.Property<Guid?>("TicketEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HallEntityId");

                    b.HasIndex("TicketEntityId");

                    b.ToTable("SittingPlaces");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.TheaterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SessionEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SessionEntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.HallEntity", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.TheaterEntity", null)
                        .WithMany("Halls")
                        .HasForeignKey("TheaterEntityId");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Sessions.AdditionalProductEntity", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Sessions.SessionEntity", null)
                        .WithMany("AdditionalServices")
                        .HasForeignKey("SessionEntityId");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Sessions.SessionEntity", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.FilmEntity", "FilmEntity")
                        .WithMany()
                        .HasForeignKey("FilmEntityId");

                    b.HasOne("Cinema.DAL.Entities.HallEntity", "HallEntity")
                        .WithMany()
                        .HasForeignKey("HallEntityId");

                    b.HasOne("Cinema.DAL.Entities.TheaterEntity", "TheaterEntity")
                        .WithMany()
                        .HasForeignKey("TheaterEntityId");

                    b.Navigation("FilmEntity");

                    b.Navigation("HallEntity");

                    b.Navigation("TheaterEntity");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.SittingPlaceEntity", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.HallEntity", null)
                        .WithMany("Places")
                        .HasForeignKey("HallEntityId");

                    b.HasOne("Cinema.DAL.Entities.TicketEntity", null)
                        .WithMany("Places")
                        .HasForeignKey("TicketEntityId");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.TicketEntity", b =>
                {
                    b.HasOne("Cinema.DAL.Entities.Sessions.SessionEntity", "SessionEntity")
                        .WithMany()
                        .HasForeignKey("SessionEntityId");

                    b.HasOne("Cinema.DAL.Entities.UserEntity", null)
                        .WithMany("Tickets")
                        .HasForeignKey("UserEntityId");

                    b.Navigation("SessionEntity");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.HallEntity", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.Sessions.SessionEntity", b =>
                {
                    b.Navigation("AdditionalServices");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.TheaterEntity", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.TicketEntity", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("Cinema.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
